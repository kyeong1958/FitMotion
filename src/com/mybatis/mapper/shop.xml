<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper     PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"     "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mybatis.mapper.ShopMapper">
	<select id="test5">
		SELECT 1 FROM dual
	</select>
<!--========================== [[ 경애시작 ]] ========================================-->
	<select id="lockerList" resultType="map">
	 SELECT locker_num ,status, lrent_purchase_date, lrent_start_day, lrent_end_day, mem_name, mem_hp, lrent_num
      FROM (               
              SELECT l.locker_num , '이용중' status, lrent_purchase_date, lrent_start_day, lrent_end_day, mem_name, mem_hp, lrent_num
                FROM locker l,  locker_rental lr, member m
               WHERE l.locker_num = lr.locker_num
                 AND lr.mem_num = m.mem_num
    <![CDATA[    AND to_date(to_char(sysdate,'yyyy/mm/dd')) >= to_date(lrent_start_day)
                 AND to_date(to_char(sysdate,'yyyy/mm/dd')) <= to_date(lrent_end_day)
                 AND (to_date(lrent_end_day) - to_date(to_char(sysdate,'yyyy/mm/dd')))>5       ]]>                                                                                      
          UNION ALL 
              SELECT l.locker_num, '만료임박' status, lrent_purchase_date, lrent_start_day, lrent_end_day, mem_name, mem_hp, lrent_num  
                FROM locker l,  locker_rental lr, member m
               WHERE l.locker_num = lr.locker_num
                 AND lr.mem_num = m.mem_num
     <![CDATA[   AND to_date(lrent_end_day) >= to_date(to_char(sysdate,'yyyy/mm/dd'))
                 AND (to_date(lrent_end_day)-to_date(to_char(sysdate,'yyyy/mm/dd'))) >= 0
                 AND  (to_date(lrent_end_day)-to_date(to_char(sysdate,'yyyy/mm/dd'))) <6     ]]>   
          UNION ALL
              SELECT l.locker_num, locker_condition,'','','','','', to_number('')
                FROM locker l
   <![CDATA[   WHERE l.locker_num NOT IN ( SELECT locker_num
                                        FROM locker_rental
                                        WHERE to_char(sysdate,'yyyy/mm/dd') >= lrent_start_day
                                          AND to_char(sysdate,'yyyy/mm/dd') <= lrent_end_day    ]]>   
                                          )                                                    
              )
     GROUP BY locker_num ,status, lrent_purchase_date, lrent_start_day, lrent_end_day, mem_name, mem_hp, lrent_num
     ORDER BY locker_num
     
	</select>
	<update id="lockUPD" parameterType="map">
		UPDATE locker_rental
		   SET lrent_start_day = #{lrent_start_day},
		   	   lrent_end_day = #{lrent_end_day}
		 WHERE lrent_num = #{rent_num}
	</update>
	<update id="lockStatusUPD" parameterType="map">
		  UPDATE locker
	    	 SET locker_condition = '고장'
	   	   WHERE locker_num = #{lockNum}
	</update>
	<insert id="lockINS">
		INSERT INTO locker_rental(lrent_num,mem_num,lrent_start_day,lrent_end_day,locker_num,gym_num)
		VALUES (seq_lrent.nextval, #{lm_memnum},#{lrent_start_day},#{lrent_end_day},#{locknum},'1')
	</insert>
	<update id="lockChange" parameterType="string">
		UPDATE locker
		   SET locker_condition = '사용가능'
		 WHERE locker_num = #{lockNum}
	</update>
<!--========================== [[ 경애끝 ]] ========================================-->
	
<!--==========================[[민지 시작 ]]=======================================================================  -->
	
	<select id="gdSel" resultType="map" parameterType="map">
	SELECT go_num,go_type,go_name,go_stock,purchase_date,purchase_price FROM Goods
	</select>
	
	
	<insert id="gdIns" parameterType="map">
	INSERT INTO Goods(go_num,go_type,go_name,go_stock,purchase_date,purchase_price,gym_num)
				values(gd_Ins.NEXTVAL,#{go_type},#{go_name},#{go_stock},#{purchase_date},#{purchase_price},'1') 
	</insert>

<!-- <delete id="gdDel" parameterMap="map">
	DELETE FROM Goods WHERE go_num=#{go_num} 
</delete>

<update id="gdUpd" parameterType="map">
	UPDATE Goods
			SET go_type = #{go_type},
			go_name = #{go_name},
			go_stock = #{go_stock},
			purchase_date = #{purchase_date},
			purchase_price = #{purchase_price}
			WHERE go_num =#{go_num} 
</update> -->

<!--==========================[[민지 끝 ]]=======================================================================  -->
<!--========================================[[ 정은 시작 ]]===============================================================  -->

   <!-- ============================================================================================================== -->
   <select id="sisId" parameterType="map" statementType="CALLABLE">
	    {call proc_login(
						 #{login_id, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String}
						 ,#{login_pw, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String}
					     ,#{rid, mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String}
					     ,#{name, mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String}
					     ,#{rank, mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String}
		)}
	</select>
	<select id="idCheck" parameterType="string" statementType="CALLABLE">
	 	{call proc_idcheck(
						 #{joinid, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String}
					     ,#{result, mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String}
		)}
	</select>
	<update id="superjoin">
		INSERT INTO gym(gym_num,gym_name,gym_address,sv_id,gym_postal_code)
		VALUES (seq_gym_code.nextval,#{gym_name},#{gym_address}||' '||#{gym_extraAddress},#{joinid}.#{gym_postal_code})
	</update>
	<select id="superjoin" parameterType="map" statementType="CALLABLE">
	 	{call proc_idcheck(
						 #{gym_name, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String}
						,#{gym_postal_code, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String}
						,#{gym_address, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String}
						,#{gym_extraAddress, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String}
						,#{joinid, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String}
						,#{join_pw, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String}
						,#{join_name, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String}
						,#{join_hp, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String}
						,#{join_gender, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String}
						,#{join_birth, mode=IN, jdbcType=VARCHAR, javaType=java.lang.String}
					    ,#{result, mode=OUT, jdbcType=VARCHAR, javaType=java.lang.String}
		)}
	</select>
	<select id="staffjoin">
	
	</select>
<!--========================================[[ 정은 끝 ]]===============================================================  -->
</mapper> 
 